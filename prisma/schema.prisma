generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String
  firstName          String              @map("first_name")
  lastName           String              @map("last_name")
  isActive           Boolean             @default(true) @map("is_active")
  role               String              @default("USER")
  credits            Int                 @default(0)
  licenseType        String              @default("FREE") @map("license_type")
  licenseExpiry      DateTime?           @map("license_expiry")
  lastLoginAt        DateTime?           @map("last_login_at")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  adminLogs          AdminLog[]
  creditTransactions CreditTransaction[]
  emailLogs          EmailLog[]
  notifications      Notification[]
  payments           Payment[]
  projects           Project[]

  @@map("users")
}

model Project {
  id             String          @id @default(cuid())
  name           String
  description    String?
  userId         String          @map("user_id")
  status         String          @default("DRAFT")
  outputCount    Int             @default(0) @map("output_count")
  settings       String
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  processingJobs ProcessingJob[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoFiles     VideoFile[]
  videoGroups    VideoGroup[]

  @@map("projects")
}

model VideoGroup {
  id         String      @id @default(cuid())
  name       String
  order      Int
  projectId  String      @map("project_id")
  createdAt  DateTime    @default(now()) @map("created_at")
  videoFiles VideoFile[]
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("video_groups")
}

model VideoFile {
  id           String      @id @default(cuid())
  originalName String      @map("original_name")
  filename     String
  path         String
  size         Int
  duration     Float
  format       String
  resolution   String
  projectId    String      @map("project_id")
  groupId      String?     @map("group_id")
  uploadedAt   DateTime    @default(now()) @map("uploaded_at")
  group        VideoGroup? @relation(fields: [groupId], references: [id])
  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("video_files")
}

model ProcessingJob {
  id           String       @id @default(cuid())
  projectId    String       @map("project_id")
  status       String       @default("PENDING")
  progress     Int          @default(0)
  startedAt    DateTime?    @map("started_at")
  completedAt  DateTime?    @map("completed_at")
  errorMessage String?      @map("error_message")
  creditsUsed  Int          @default(0) @map("credits_used")
  outputCount  Int          @default(1) @map("output_count")
  refundedAt   DateTime?    @map("refunded_at")
  createdAt    DateTime     @default(now()) @map("created_at")
  settings     String?      @map("settings")
  outputFiles  OutputFile[]
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("processing_jobs")
}

model OutputFile {
  id          String        @id @default(cuid())
  jobId       String        @map("job_id")
  filename    String
  path        String
  size        Int
  duration    Float
  metadata    String
  sourceFiles String        @map("source_files")
  createdAt   DateTime      @default(now()) @map("created_at")
  job         ProcessingJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("output_files")
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  amount      Int
  type        String
  description String
  paymentId   String?  @map("payment_id")
  createdAt   DateTime @default(now()) @map("created_at")
  payment     Payment? @relation(fields: [paymentId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

model Payment {
  id                 String              @id @default(cuid())
  userId             String              @map("user_id")
  receiptNumber      String              @unique @map("receipt_number")
  amount             Float
  currency           String              @default("IDR")
  creditsAmount      Int                 @map("credits_amount")
  status             String              @default("PENDING")
  paymentMethod      String?             @map("payment_method")
  notes              String?
  paidAt             DateTime?           @map("paid_at")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  creditTransactions CreditTransaction[]
  emailLogs          EmailLog[]
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model EmailLog {
  id           String    @id @default(cuid())
  userId       String?   @map("user_id")
  paymentId    String?   @map("payment_id")
  emailType    String    @map("email_type")
  recipient    String
  subject      String
  template     String
  status       String    @default("PENDING")
  sentAt       DateTime? @map("sent_at")
  errorMessage String?   @map("error_message")
  createdAt    DateTime  @default(now()) @map("created_at")
  payment      Payment?  @relation(fields: [paymentId], references: [id])
  user         User?     @relation(fields: [userId], references: [id])

  @@map("email_logs")
}

model AdminLog {
  id          String   @id @default(cuid())
  adminId     String   @map("admin_id")
  action      String
  targetType  String   @map("target_type")
  targetId    String?  @map("target_id")
  description String
  metadata    String?
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")
  admin       User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  type      String
  title     String
  message   String
  data      String?
  isRead    Boolean   @default(false) @map("is_read")
  priority  String    @default("MEDIUM")
  category  String
  expiresAt DateTime? @map("expires_at")
  readAt    DateTime? @map("read_at")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
