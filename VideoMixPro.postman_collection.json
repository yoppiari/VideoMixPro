{
  "info": {
    "name": "VideoMixPro API",
    "description": "Comprehensive API collection for VideoMixPro - A video processing and mixing platform",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script for authentication",
          "if (pm.request.url.path.includes('auth') && !pm.request.url.path.includes('refresh')) {",
          "    // Skip authentication for login/register endpoints",
          "    return;",
          "}",
          "",
          "// Check if access token exists and is not expired",
          "const accessToken = pm.environment.get('access_token');",
          "const tokenExpiry = pm.environment.get('token_expiry');",
          "",
          "if (!accessToken || (tokenExpiry && Date.now() > parseInt(tokenExpiry))) {",
          "    console.log('Access token is missing or expired, attempting refresh...');",
          "    ",
          "    const refreshToken = pm.environment.get('refresh_token');",
          "    if (refreshToken) {",
          "        pm.sendRequest({",
          "            url: pm.environment.get('base_url') + '/api/v1/auth/refresh',",
          "            method: 'POST',",
          "            header: {",
          "                'Content-Type': 'application/json'",
          "            },",
          "            body: {",
          "                mode: 'raw',",
          "                raw: JSON.stringify({",
          "                    refreshToken: refreshToken",
          "                })",
          "            }",
          "        }, function (err, response) {",
          "            if (err) {",
          "                console.log('Error refreshing token:', err);",
          "                return;",
          "            }",
          "            ",
          "            if (response.code === 200) {",
          "                const responseJson = response.json();",
          "                if (responseJson.success && responseJson.data) {",
          "                    pm.environment.set('access_token', responseJson.data.accessToken);",
          "                    pm.environment.set('refresh_token', responseJson.data.refreshToken);",
          "                    pm.environment.set('token_expiry', Date.now() + (responseJson.data.expiresIn * 1000));",
          "                    console.log('Token refreshed successfully');",
          "                }",
          "            } else {",
          "                console.log('Failed to refresh token. Please login again.');",
          "                pm.environment.unset('access_token');",
          "                pm.environment.unset('refresh_token');",
          "                pm.environment.unset('token_expiry');",
          "            }",
          "        });",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for response validation",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has proper content-type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "if (pm.response.code !== 404) {",
          "    pm.test('Response body is valid JSON', function () {",
          "        pm.response.to.be.json;",
          "    });",
          "    ",
          "    pm.test('Response has success field', function () {",
          "        const responseJson = pm.response.json();",
          "        pm.expect(responseJson).to.have.property('success');",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "{{base_url}}",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "{{access_token}}",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "{{refresh_token}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication endpoints including registration, login, logout, and license verification",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"securePassword123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Register a new user account with email, password, and personal details"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    pm.test('Response contains user data', function () {",
                  "        pm.expect(responseJson.success).to.be.true;",
                  "        pm.expect(responseJson.data).to.have.property('user');",
                  "    });",
                  "    ",
                  "    if (responseJson.data && responseJson.data.accessToken) {",
                  "        pm.environment.set('access_token', responseJson.data.accessToken);",
                  "        pm.environment.set('refresh_token', responseJson.data.refreshToken);",
                  "        pm.environment.set('token_expiry', Date.now() + (responseJson.data.expiresIn * 1000));",
                  "        pm.environment.set('user_id', responseJson.data.user.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"securePassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Authenticate user with email and password"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    pm.test('Response contains tokens', function () {",
                  "        pm.expect(responseJson.success).to.be.true;",
                  "        pm.expect(responseJson.data).to.have.property('accessToken');",
                  "        pm.expect(responseJson.data).to.have.property('refreshToken');",
                  "    });",
                  "    ",
                  "    // Store tokens in environment",
                  "    pm.environment.set('access_token', responseJson.data.accessToken);",
                  "    pm.environment.set('refresh_token', responseJson.data.refreshToken);",
                  "    pm.environment.set('token_expiry', Date.now() + (responseJson.data.expiresIn * 1000));",
                  "    pm.environment.set('user_id', responseJson.data.user.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "refresh"]
            },
            "description": "Refresh access token using refresh token"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Token refresh successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    pm.test('Response contains new tokens', function () {",
                  "        pm.expect(responseJson.success).to.be.true;",
                  "        pm.expect(responseJson.data).to.have.property('accessToken');",
                  "    });",
                  "    ",
                  "    // Update tokens in environment",
                  "    pm.environment.set('access_token', responseJson.data.accessToken);",
                  "    if (responseJson.data.refreshToken) {",
                  "        pm.environment.set('refresh_token', responseJson.data.refreshToken);",
                  "    }",
                  "    pm.environment.set('token_expiry', Date.now() + (responseJson.data.expiresIn * 1000));",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "logout"]
            },
            "description": "Logout user and invalidate tokens"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "// Clear tokens from environment",
                  "pm.environment.unset('access_token');",
                  "pm.environment.unset('refresh_token');",
                  "pm.environment.unset('token_expiry');",
                  "pm.environment.unset('user_id');"
                ]
              }
            }
          ]
        },
        {
          "name": "Verify License",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"licenseKey\": \"VMIX-PREMIUM-2024-ABCD1234\",\n  \"machineId\": \"unique-machine-identifier-123\",\n  \"appVersion\": \"1.0.0\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/verify-license",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "verify-license"]
            },
            "description": "Verify software license for premium features"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('License verification completed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    pm.test('License verification response structure', function () {",
                  "        pm.expect(responseJson.success).to.be.true;",
                  "        pm.expect(responseJson.data).to.have.property('valid');",
                  "        pm.expect(responseJson.data).to.have.property('licenseType');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Management",
      "description": "User profile and account management endpoints",
      "item": [
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "users", "profile"]
            },
            "description": "Get current user's profile information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Profile data structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('lastName');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"jane.smith@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "users", "profile"]
            },
            "description": "Update user profile information"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Profile updated successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Updated profile data', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Credits",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/users/credits",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "users", "credits"]
            },
            "description": "Get current user's credit balance"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Credits retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Credits data structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('credits');",
                  "    pm.expect(responseJson.data.credits).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Purchase Credits",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 100,\n  \"paymentMethod\": \"credit_card\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/users/credits/purchase",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "users", "credits", "purchase"]
            },
            "description": "Purchase additional credits for video processing"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Credit purchase processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Purchase response structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('transaction');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/users/transactions?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "users", "transactions"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get user's transaction history with pagination"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transactions retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Transactions data structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson).to.have.property('pagination');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Projects",
      "description": "Project management endpoints for CRUD operations",
      "item": [
        {
          "name": "Get Projects",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/projects?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "projects"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get user's projects with pagination"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Projects retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Projects data structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson).to.have.property('pagination');",
                  "});",
                  "",
                  "if (responseJson.data.length > 0) {",
                  "    pm.environment.set('project_id', responseJson.data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Project",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"My Video Mix Project\",\n  \"description\": \"A sample video mixing project for testing\",\n  \"settings\": {\n    \"mixingMode\": \"AUTO\",\n    \"outputFormat\": \"MP4\",\n    \"quality\": \"HIGH\",\n    \"outputCount\": 10,\n    \"metadata\": {\n      \"static\": {\n        \"creator\": \"VideoMixPro\",\n        \"project\": \"Sample Project\"\n      },\n      \"includeDynamic\": true,\n      \"fields\": [\"timestamp\", \"duration\", \"resolution\"]\n    },\n    \"groups\": [\n      {\n        \"name\": \"Main Videos\",\n        \"order\": 0\n      },\n      {\n        \"name\": \"Background Music\",\n        \"order\": 1\n      }\n    ]\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/projects",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "projects"]
            },
            "description": "Create a new video mixing project"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Project created successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Project data structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('settings');",
                  "});",
                  "",
                  "// Store project ID for subsequent requests",
                  "pm.environment.set('project_id', responseJson.data.id);",
                  "if (responseJson.data.settings.groups && responseJson.data.settings.groups.length > 0) {",
                  "    pm.environment.set('group_id', responseJson.data.settings.groups[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Project",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/projects/{{project_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "projects", "{{project_id}}"]
            },
            "description": "Get specific project details by ID"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Project retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Project data structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('settings');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Project",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Video Mix Project\",\n  \"description\": \"Updated description for the video mixing project\",\n  \"settings\": {\n    \"mixingMode\": \"MANUAL\",\n    \"outputFormat\": \"MOV\",\n    \"quality\": \"ULTRA\",\n    \"outputCount\": 15\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/projects/{{project_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "projects", "{{project_id}}"]
            },
            "description": "Update existing project details"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Project updated successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Updated project data', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Project",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/projects/{{project_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "projects", "{{project_id}}"]
            },
            "description": "Delete a project and all associated data"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Project deleted successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "// Clear project ID after deletion",
                  "pm.environment.unset('project_id');"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Group",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"New Video Group\",\n  \"order\": 2\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/projects/{{project_id}}/groups",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "projects", "{{project_id}}", "groups"]
            },
            "description": "Create a new video group within a project"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Group created successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.success && responseJson.data) {",
                  "    pm.environment.set('group_id', responseJson.data.id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Group",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Video Group\",\n  \"order\": 3\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/projects/{{project_id}}/groups/{{group_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "projects", "{{project_id}}", "groups", "{{group_id}}"]
            },
            "description": "Update an existing video group"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Group updated successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Group",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/projects/{{project_id}}/groups/{{group_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "projects", "{{project_id}}", "groups", "{{group_id}}"]
            },
            "description": "Delete a video group from project"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Group deleted successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Videos",
      "description": "Video upload and management endpoints",
      "item": [
        {
          "name": "Upload Videos",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "videos",
                  "type": "file",
                  "src": [],
                  "description": "Video files to upload (max 50 files)"
                },
                {
                  "key": "projectId",
                  "value": "{{project_id}}",
                  "type": "text"
                },
                {
                  "key": "groupId",
                  "value": "{{group_id}}",
                  "type": "text",
                  "description": "Optional group ID"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/videos/upload",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "videos", "upload"]
            },
            "description": "Upload video files to a project. Supports multiple files up to 50 at once."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Videos uploaded successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Upload response structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "if (responseJson.data && responseJson.data.length > 0) {",
                  "    pm.environment.set('video_id', responseJson.data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Project Videos",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/project/{{project_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "videos", "project", "{{project_id}}"]
            },
            "description": "Get all videos associated with a specific project"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Project videos retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Videos data structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "if (responseJson.data.length > 0) {",
                  "    pm.environment.set('video_id', responseJson.data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Video Metadata",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/{{video_id}}/metadata",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "videos", "{{video_id}}", "metadata"]
            },
            "description": "Get detailed metadata for a specific video"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Video metadata retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Metadata structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('duration');",
                  "    pm.expect(responseJson.data).to.have.property('resolution');",
                  "    pm.expect(responseJson.data).to.have.property('format');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Video",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/{{video_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "videos", "{{video_id}}"]
            },
            "description": "Delete a video file from the system"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Video deleted successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "// Clear video ID after deletion",
                  "pm.environment.unset('video_id');"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Processing",
      "description": "Video processing job management endpoints",
      "item": [
        {
          "name": "Start Processing",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"options\": {\n    \"priority\": \"normal\",\n    \"notifyOnComplete\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/processing/start/{{project_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "processing", "start", "{{project_id}}"]
            },
            "description": "Start video processing for a project"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Processing started successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Processing job created', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('jobId');",
                  "    pm.expect(responseJson.data).to.have.property('status');",
                  "});",
                  "",
                  "// Store job ID for subsequent requests",
                  "pm.environment.set('job_id', responseJson.data.jobId);"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Job Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processing/status/{{job_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "processing", "status", "{{job_id}}"]
            },
            "description": "Get processing job status and progress"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Job status retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Job status structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('status');",
                  "    pm.expect(responseJson.data).to.have.property('progress');",
                  "});",
                  "",
                  "// Check if job is completed and has outputs",
                  "if (responseJson.data.status === 'COMPLETED' && responseJson.data.outputFiles) {",
                  "    if (responseJson.data.outputFiles.length > 0) {",
                  "        pm.environment.set('output_id', responseJson.data.outputFiles[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Cancel Job",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processing/cancel/{{job_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "processing", "cancel", "{{job_id}}"]
            },
            "description": "Cancel a running processing job"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Job cancellation processed', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 202]);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Cancellation response', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Jobs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processing/jobs?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "processing", "jobs"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get user's processing jobs with pagination"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('User jobs retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Jobs data structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson).to.have.property('pagination');",
                  "});",
                  "",
                  "if (responseJson.data.length > 0) {",
                  "    pm.environment.set('job_id', responseJson.data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Job Outputs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processing/outputs/{{job_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "processing", "outputs", "{{job_id}}"]
            },
            "description": "Get output files for a completed processing job"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Job outputs retrieved successfully', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Outputs data structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "if (responseJson.data.length > 0) {",
                  "    pm.environment.set('output_id', responseJson.data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Download Output",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processing/download/{{output_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "processing", "download", "{{output_id}}"]
            },
            "description": "Download a processed output file"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Output download initiated', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                  "});",
                  "",
                  "// Check for appropriate headers for file download",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Download headers present', function () {",
                  "        pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "System",
      "description": "System health and status endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check API health status"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.expect(pm.response.code).to.eql(200);",
                  "});",
                  "",
                  "const responseJson = pm.response.json();",
                  "pm.test('Health response structure', function () {",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('status');",
                  "    pm.expect(responseJson.data).to.have.property('timestamp');",
                  "    pm.expect(responseJson.data.status).to.eql('healthy');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
}